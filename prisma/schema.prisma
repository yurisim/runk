// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "../apps/prunk-api/src/@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id            String     @id @default(uuid())
  /// @Validator.IsEmail()
  email         String?    @unique
  firstName     String
  /// @Validator.MaxLength(1)
  middleInitial String?
  lastName      String
  /// @Validator.MaxLength(10)
  DODID         Int        @unique
  // Can't do this because it changes over time in a form
  // org           Org        @relation(fields: [orgId], references: [id])
  // orgId         String
  rateeOf       Response[] @relation("Ratee")
  raterOf       Response[] @relation("Rater")
  addtlRaterOf  Response[] @relation("AddtlRater")
  CCOf          Response[] @relation("CC")
}

model Org {
  id   String @id @default(uuid())
  name String @unique
  PAS  String @unique
  // users Person[]
}

model Form {
  id        String     @id @default(uuid())
  version   Int        @unique
  questions Question[]
  responses Response[]
}

model Question {
  id      String   @id @default(uuid())
  value   String   @unique
  form    Form?    @relation(fields: [formId], references: [id])
  formId  String?
  answers Answer[]
}

model Answer {
  id         String     @id @default(uuid())
  value      String
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  responses  Response[]
}

model Response {
  id           String         @id @default(uuid())
  // one user can have many responses
  form         Form           @relation(fields: [formId], references: [id])
  formId       String
  answers      Answer[]
  begin        DateTime
  end          DateTime
  nonRatedDays Int
  status       ResponseStatus
  reason       ReportReason
  ratee        Person         @relation("Ratee", fields: [rateeId], references: [id])
  rateeId      String
  rater        Person?        @relation("Rater", fields: [raterId], references: [id])
  raterId      String?
  addtlRater   Person?        @relation("AddtlRater", fields: [addtlRaterId], references: [id])
  addtlRaterId String?
  CC           Person?        @relation("CC", fields: [CCId], references: [id])
  CCId         String?
}

enum ResponseStatus {
  InProgress
  Submitted
  Completed
}

enum ReportReason {
  Annual
  DirectedByCommander
  Biennial
  DirectedByHAF
  CRO
  Initial
  DirectedByNGB
}

// enum RatedScale {
//   NotRated =
//   MetSome
//   MetAll
//   ExceededSome
//   ExceededMost
// }
